#!/bin/bash
mkchdir () {
  mkdir -p -- "$1" && cd -P -- "$1"
}

proxy() {
  if [ "$1" == "on" ]; then
    export http_proxy=$PROXY
    export https_proxy=$PROXY
  elif [ "$1" == "off" ]; then
    export http_proxy=""
    export https_proxy=""
  else
    echo "Unknown argument. Must be \"on\" or \"off\"."
  fi
}

ipi () {
  echo "$(curl ${I_IPSERVICE} --silent)"
}

setTitle () {
  echo -ne "\033]0;$1\a";
}

genPwd () {
python3 - << EOF
import secrets
import string

chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
print(
    "".join(
        secrets.choice(chars) for _ in range(32)
    )
)
EOF
}

genPwdPhrase () {
python3 - << EOF
import secrets
from pathlib import Path

words = [
    wrd
    for wrd in Path("/usr/share/dict/words")
    .read_text(encoding="ISO-8859-1")
    .splitlines()
]
print(" ".join(secrets.choice(words) for _ in range(6)))
EOF
}

genGuid () {
  python3 -c 'import uuid; print(uuid.uuid4())'
}

urlencode () {
  python3 -c 'import sys, urllib.parse; print(urllib.parse.quote(input(), safe=""))'
}

urldecode () {
  python3 -c 'import sys, urllib.parse; print(urllib.parse.unquote(input()))'
}

base64urldecode () {
  python3 -c '
import sys
from base64 import urlsafe_b64decode
data = input()
num_padding = (4 - len(data) % 4) % 4
sys.stdout.buffer.write(urlsafe_b64decode(data + "=" * num_padding))
'
}

base64urlencode () {
  python3 -c '
import sys
from base64 import urlsafe_b64encode
sys.stdout.buffer.write(urlsafe_b64encode(sys.stdin.buffer.read()))
'
}

purgeLocalBranches() {
  main_branch=$(git branch --list master main --format="%(refname:short)")
  for branch in $(git branch --merged "origin/$main_branch" --format="%(refname:short)"); do
    if [[ "$branch" != "$main_branch" ]]; then
      git branch -D "$branch"
    fi
  done
}
